#!/bin/bash

# sprint-transition.sh - Automated Sprint Transition Management
# Handles sprint completion, creation, and transitions without manual CLAUDE.env updates

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load detection functions
DETECT_SCRIPT="$SCRIPT_DIR/detect-project-state.sh"
if [ ! -f "$DETECT_SCRIPT" ]; then
    echo -e "${RED}‚ùå Error: detect-project-state.sh not found${NC}"
    exit 1
fi

# Get current date
CURRENT_DATE=$(date +"%m-%d-%Y")

# Helper function to find PROJECT_PLAN.md
find_project_plan() {
    if [ -f "./Project_Management/PROJECT_PLAN.md" ]; then
        echo "./Project_Management/PROJECT_PLAN.md"
    elif [ -f "./PROJECT_PLAN.md" ]; then
        echo "./PROJECT_PLAN.md"
    else
        echo ""
    fi
}

# Complete current sprint
complete_sprint() {
    local sprint_name="$1"
    local project_plan=$(find_project_plan)
    
    if [ -z "$project_plan" ]; then
        echo -e "${RED}‚ùå PROJECT_PLAN.md not found${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üì¶ Completing Sprint: $sprint_name${NC}"
    
    # Update sprint status in PROJECT_PLAN.md
    sed -i "s/\*\*Status\*\*: IN_PROGRESS/**Status**: COMPLETED/g" "$project_plan"
    sed -i "s/## $sprint_name.*üìã/## $sprint_name ‚úÖ/g" "$project_plan"
    sed -i "s/## $sprint_name.*üöß/## $sprint_name ‚úÖ/g" "$project_plan"
    
    # Archive sprint execution directory
    if [ -d "./Project_Management/Sprint_Execution/$sprint_name" ]; then
        mkdir -p "./Project_Management/Archive/Sprints"
        mv "./Project_Management/Sprint_Execution/$sprint_name" "./Project_Management/Archive/Sprints/${sprint_name}_completed_${CURRENT_DATE}"
        echo -e "${GREEN}‚úÖ Sprint artifacts archived${NC}"
    fi
    
    # Create retrospective template
    mkdir -p "./Project_Management/Sprint_Retrospectives"
    cat > "./Project_Management/Sprint_Retrospectives/${sprint_name}_retrospective.md" << EOF
---
title: ${sprint_name} Retrospective
date: ${CURRENT_DATE}
sprint: ${sprint_name}
status: completed
---

# ${sprint_name} Retrospective

**Date:** ${CURRENT_DATE}
**Sprint:** ${sprint_name}

## Sprint Summary
- **Goal:** [Extracted from PROJECT_PLAN]
- **Duration:** [Extracted from PROJECT_PLAN]
- **Story Points Delivered:** [Extracted from PROJECT_PLAN]

## What Went Well
- 

## What Could Be Improved
- 

## Action Items
- 

## Metrics
- Velocity: 
- Bug Rate: 
- Test Coverage: 

## Lessons Learned
- 

---
*Generated by sprint-transition.sh*
EOF
    
    echo -e "${GREEN}‚úÖ Retrospective template created${NC}"
}

# Create new sprint
create_sprint() {
    local sprint_name="$1"
    local sprint_goal="$2"
    local duration="$3"
    local story_points="$4"
    local project_plan=$(find_project_plan)
    
    if [ -z "$project_plan" ]; then
        echo -e "${RED}‚ùå PROJECT_PLAN.md not found${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üöÄ Creating Sprint: $sprint_name${NC}"
    
    # Create sprint directories
    mkdir -p "./Project_Management/Sprint_Execution/${sprint_name}/agent_handoffs"
    mkdir -p "./Project_Management/Sprint_Execution/${sprint_name}/work_reports"
    mkdir -p "./Project_Management/Sprint_Execution/${sprint_name}/implementation_reports"
    
    # Add sprint section to PROJECT_PLAN.md (before the Backlog section)
    local sprint_section="
## ${sprint_name} (${CURRENT_DATE} to TBD) üöß

**Sprint Goal**: ${sprint_goal}
**Sprint Duration**: ${duration}
**Total Story Points**: ${story_points}
**Status**: IN_PROGRESS
**Completion Rate**: 0% (0/0 tickets)
**Story Points Delivered**: 0/${story_points} (0%)

### Sprint Backlog

| Ticket ID | Title | Status | Story Points | Assignee | Priority |
|-----------|-------|--------|--------------|----------|----------|
| TBD | TBD | TODO | 0 | TBD | High |

---
"
    
    # Insert before "## Backlog" section
    awk -v sprint="$sprint_section" '/^## Backlog/ {print sprint} 1' "$project_plan" > "${project_plan}.tmp"
    mv "${project_plan}.tmp" "$project_plan"
    
    echo -e "${GREEN}‚úÖ Sprint ${sprint_name} created${NC}"
    echo -e "${GREEN}‚úÖ Sprint directories created${NC}"
}

# Transition to next sprint
transition_sprint() {
    local from_sprint="$1"
    local to_sprint="$2"
    local sprint_goal="$3"
    local duration="${4:-2 weeks}"
    local story_points="${5:-30}"
    
    echo -e "${BLUE}üîÑ Sprint Transition: ${from_sprint} ‚Üí ${to_sprint}${NC}"
    echo -e "${BLUE}====================================================${NC}"
    
    # Complete current sprint
    if [ -n "$from_sprint" ] && [ "$from_sprint" != "Unknown" ]; then
        complete_sprint "$from_sprint"
    fi
    
    # Create new sprint
    create_sprint "$to_sprint" "$sprint_goal" "$duration" "$story_points"
    
    # Update GitHub Project Board if gh CLI is available
    if command -v gh &> /dev/null; then
        echo -e "${BLUE}üìä Updating GitHub Project Board...${NC}"
        # Add sprint label
        gh label create "$to_sprint" --color "0E8A16" --description "Sprint: $to_sprint" 2>/dev/null || true
        # Note: Further board updates would require project board API
    fi
    
    echo -e "${GREEN}‚úÖ Sprint transition complete!${NC}"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Add tickets to the new sprint backlog in PROJECT_PLAN.md"
    echo "2. Run sprint planning: /sprint-plan $to_sprint"
    echo "3. Begin sprint execution: /sprint-execute"
}

# Update ticket status
update_ticket_status() {
    local ticket_id="$1"
    local new_status="$2"
    local project_plan=$(find_project_plan)
    
    if [ -z "$project_plan" ]; then
        echo -e "${RED}‚ùå PROJECT_PLAN.md not found${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üìù Updating ticket ${ticket_id} to ${new_status}${NC}"
    
    # Update ticket status in PROJECT_PLAN.md
    sed -i "s/| ${ticket_id} |.*|.*| \([0-9]*\) |/| ${ticket_id} | \\1 | ${new_status} | \\2 |/" "$project_plan"
    
    echo -e "${GREEN}‚úÖ Ticket status updated${NC}"
}

# Show current state
show_state() {
    echo -e "${GREEN}üìä Current Project State${NC}"
    echo -e "${GREEN}========================${NC}"
    
    # Use the detection script
    "$DETECT_SCRIPT" --display
}

# Main function
main() {
    case "${1:-help}" in
        complete)
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Sprint name required${NC}"
                echo "Usage: $0 complete <sprint-name>"
                exit 1
            fi
            complete_sprint "$2"
            ;;
        create)
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}Error: Sprint name and goal required${NC}"
                echo "Usage: $0 create <sprint-name> <goal> [duration] [story-points]"
                exit 1
            fi
            create_sprint "$2" "$3" "${4:-2 weeks}" "${5:-30}"
            ;;
        transition)
            if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
                echo -e "${RED}Error: Missing required parameters${NC}"
                echo "Usage: $0 transition <from-sprint> <to-sprint> <goal> [duration] [story-points]"
                exit 1
            fi
            transition_sprint "$2" "$3" "$4" "${5:-2 weeks}" "${6:-30}"
            ;;
        auto)
            # Auto-detect current sprint and transition to next
            local current=$("$DETECT_SCRIPT" --sprint)
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}Error: New sprint name and goal required${NC}"
                echo "Usage: $0 auto <new-sprint> <goal> [duration] [story-points]"
                exit 1
            fi
            transition_sprint "$current" "$2" "$3" "${4:-2 weeks}" "${5:-30}"
            ;;
        ticket)
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}Error: Ticket ID and status required${NC}"
                echo "Usage: $0 ticket <ticket-id> <new-status>"
                echo "Status options: TODO, IN_PROGRESS, CODE_REVIEW, QA_TESTING, DOCUMENTATION, READY_FOR_RELEASE, DONE, BLOCKED"
                exit 1
            fi
            update_ticket_status "$2" "$3"
            ;;
        state|status)
            show_state
            ;;
        help|--help|-h|*)
            echo "Sprint Transition Management Tool"
            echo ""
            echo "Usage: $0 <command> [options]"
            echo ""
            echo "Commands:"
            echo "  complete <sprint>                     Complete a sprint and archive it"
            echo "  create <sprint> <goal> [dur] [pts]   Create a new sprint"
            echo "  transition <from> <to> <goal> [opts] Transition between sprints"
            echo "  auto <new-sprint> <goal> [opts]      Auto-detect current and transition"
            echo "  ticket <id> <status>                 Update ticket status"
            echo "  state                                Show current project state"
            echo ""
            echo "Examples:"
            echo "  $0 complete Sprint_3"
            echo "  $0 create Sprint_4 'Implement user auth' '2 weeks' 30"
            echo "  $0 transition Sprint_3 Sprint_4 'Implement user auth'"
            echo "  $0 auto Sprint_4 'Implement user auth'"
            echo "  $0 ticket MCP-041 DONE"
            echo "  $0 state"
            echo ""
            ;;
    esac
}

# Run main function
main "$@"